import os
import json
import re
from datetime import datetime
from pathlib import Path
from typing import Optional, Union

import pandas as pd
from rich.console import Console
console = Console()
from crewai import Crew, Process
from langchain_groq import ChatGroq
from dotenv import load_dotenv
from crewai import Task

from src.models.models import Exercise, EvaluationResult, StudentProfile, CoachPersonal,PersonalizedCoachMessage
from src.agents.exercise_creator_agent import ExerciseCreatorAgent
from src.agents.evaluator_agent import EvaluatorAgent
from src.agents.personal_coach_agent import PersonalCoachAgent
from src.tasks.exercise_creation_task import ExerciseCreationTask
from src.tasks.evaluation_task import EvaluationTask
from src.tools.file_processor import FileProcessor
from src.config.learning_objectives import LearningObjectives
from src.student_manager import StudentManager
from langchain_community.chat_models import ChatOllama
from src.session_manager import SessionManager

load_dotenv()

class MathTutoringSystem:
    def __init__(self, model_name="llama-3.3-70b-versatile"):
        self.model_name = model_name
        self.llm = self._initialize_llm()
        
        self.file_processor = FileProcessor()
        self.session_manager = SessionManager()
        self.learning_objectives = LearningObjectives()
        self.current_student: Optional[StudentProfile] = None

        self.exercise_creator_agent = ExerciseCreatorAgent(self.llm).create_agent() if self.llm else None
        self.evaluator_agent = EvaluatorAgent(self.llm).create_agent() if self.llm else None
        self.personal_coach_agent = PersonalCoachAgent(self.llm).create_agent() if self.llm else None

        self.exercise_creation_task = ExerciseCreationTask(self.exercise_creator_agent) if self.exercise_creator_agent else None
        self.evaluation_task = EvaluationTask(self.evaluator_agent) if self.evaluator_agent else None

    def _initialize_llm(self):
        try:
            return ChatGroq(
                api_key=os.getenv("GROQ_API_KEY"),
                model="groq/llama-3.3-70b-versatile",
                temperature=0.3,
                max_tokens=2048
            )
        except Exception as e:
            console.print(f"Mode hors ligne activ√©: {str(e)}")
            return None

    def set_current_student(self, student_id: str, student_name: Optional[str] = None):
        """Utilise le SessionManager au lieu de charger directement"""
        session = self.session_manager.get_or_create_session(student_id, student_name)
        self.current_student = session.student_profile
        
        # Charger les m√©moires initiales si disponible
        if session.memory:
            self._load_initial_memories_from_session(session)

    def _load_initial_memories_from_session(self, session):
        """Charge les m√©moires depuis la session (d√©j√† synchronis√©es)"""
        if not session.memory:
            return
        
        # Les m√©moires sont d√©j√† synchronis√©es automatiquement par le SessionManager
        # Ici on peut optionnellement r√©cup√©rer des m√©moires sp√©cifiques si n√©cessaire
        try:
            # Exemple : r√©cup√©rer les derni√®res r√©ussites pour contextualiser
            recent_achievements = session.memory.query_memory(
                query_texts=["objectif compl√©t√©", "achievement"],
                n_results=5
            )
            if recent_achievements:
                console.print(f"üìö {len(recent_achievements)} m√©moires charg√©es pour contextualisation")
        except Exception as e:
            console.print(f"‚ö†Ô∏è Erreur chargement m√©moires contextuelles: {str(e)}")
            
    def save_current_student(self) -> bool:
        """Sauvegarde l'√©tudiant actuel via le SessionManager"""
        if not self.current_student:
            return False
        
        return self.session_manager.save_session(self.current_student.student_id)

    def add_exercise_to_history(self, exercise: Exercise, answer: str, is_correct: bool):
        """Ajoute un exercice √† l'historique de l'√©tudiant actuel"""
        if not self.current_student:
            return
        
        history_item = {
            "exercise": exercise.exercise,
            "answer": answer,
            "evaluation": is_correct,
            "timestamp": datetime.now().isoformat(),
            "concept": exercise.concept
        }
        
        self.current_student.learning_history.append(history_item)
        
        # Sauvegarder automatiquement
        self.save_current_student()
        
    def get_current_objective_info(self):
        if not self.current_student:
            return None
        
        objective = self.learning_objectives.objectives.get(self.current_student.current_objective or "", {})
        if not objective:
            return None
        
        return {
            "description": objective.get("description", ""),
            "level_name": objective.get("level_name", ""),
            "total_levels": sum(
                len(theme.get("niveaux", {})) for cycle in self.learning_objectives.objectives.values()
                for theme in cycle.values()
            ),
            "objectives": objective.get("objectives", [])
        }


    def get_student_progress(self):
        if not self.current_student:
            return None
        
        return {
            "level": self.current_student.level,
            "completed": len(self.current_student.objectives_completed),
            "history": pd.DataFrame(self.current_student.learning_history)
        }

    def _clean_latex_escapes(self, json_str: str) -> str:
        """Nettoie les √©chappements LaTeX dans une cha√Æne JSON de mani√®re robuste"""
        try:
            # M√©thode 1: √âchapper tous les backslashes qui ne sont pas d√©j√† √©chapp√©s
            # D'abord, prot√©ger les backslashes d√©j√† √©chapp√©s
            json_str = json_str.replace('\\\\', '__DOUBLE_BACKSLASH_PLACEHOLDER__')
            
            # Ensuite, √©chapper tous les backslashes simples restants
            json_str = json_str.replace('\\', '\\\\')
            
            # Enfin, restaurer les doubles backslashes prot√©g√©s
            json_str = json_str.replace('__DOUBLE_BACKSLASH_PLACEHOLDER__', '\\\\')
            
            return json_str
            
        except Exception as e:
            console.print(f"Erreur nettoyage LaTeX: {str(e)}")
            return json_str

    def _clean_latex_escapes_alternative(self, json_str: str) -> str:
        """Version alternative avec expressions r√©guli√®res pour les commandes LaTeX"""
        try:
            # Pattern pour les expressions LaTeX dans les cha√Ænes JSON
            # Cherche les backslashes suivis de lettres (commandes LaTeX) qui ne sont pas √©chapp√©s
            latex_pattern = r'(?<!\\)\\([a-zA-Z]+(?:\{[^}]*\})*)'
            
            def escape_latex_match(match):
                return '\\\\' + match.group(1)
            
            # Appliquer le remplacement
            json_str = re.sub(latex_pattern, escape_latex_match, json_str)
            
            # G√©rer les cas sp√©ciaux
            special_patterns = {
                r'(?<!\\)\\mathbb\{([^}]+)\}': r'\\\\mathbb{{\1}}',
                r'(?<!\\)\\frac\{([^}]+)\}\{([^}]+)\}': r'\\\\frac{{\1}}{{\2}}',
                r'(?<!\\)\\sqrt\{([^}]+)\}': r'\\\\sqrt{{\1}}',
                r'(?<!\\)\\infty': r'\\\\infty',
                r'(?<!\\)\\pi': r'\\\\pi'
            }
            
            for pattern, replacement in special_patterns.items():
                json_str = re.sub(pattern, replacement, json_str)
            
            return json_str
            
        except Exception as e:
            console.print(f"Erreur nettoyage LaTeX alternatif: {str(e)}")
            return json_str

    def _manual_parse_exercise(self, text: str) -> Optional[Exercise]:
        """Parsing manuel en cas d'√©chec du JSON"""
        try:
            # Extraire les informations avec des expressions r√©guli√®res
            exercise_match = re.search(r'"exercise":\s*"(.*?)"(?=\s*,)', text, re.DOTALL)
            solution_match = re.search(r'"solution":\s*"(.*?)"(?=\s*,)', text, re.DOTALL)
            hints_match = re.search(r'"hints":\s*\[(.*?)\]', text, re.DOTALL)
            difficulty_match = re.search(r'"difficulty":\s*"([^"]+)"', text)
            concept_match = re.search(r'"concept":\s*"([^"]+)"', text)
            
            if not all([exercise_match, solution_match, difficulty_match, concept_match]):
                console.print("Impossible d'extraire toutes les informations n√©cessaires")
                return None
            
            # Extraire les hints
            hints = []
            if hints_match:
                hints_content = hints_match.group(1)
                # Extraire chaque hint entre guillemets
                hint_matches = re.findall(r'"(.*?)"(?=\s*[,\]])', hints_content, re.DOTALL)
                hints = hint_matches
            
            return Exercise(
                exercise=exercise_match.group(1).strip(),
                solution=solution_match.group(1).strip(), 
                hints=hints if hints else ["Aucun indice disponible"],
                difficulty=difficulty_match.group(1).strip(),
                concept=concept_match.group(1).strip()
            )
            
        except Exception as e:
            console.print(f"Erreur parsing manuel: {str(e)}")
            return None

    def _parse_exercise_from_text(self, text: str) -> Optional[Exercise]:
        """Parse un exercice depuis le texte de sortie avec m√©thodes robustes"""
        try:
            # Chercher un JSON dans le texte
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if not json_match:
                console.print("Aucun JSON trouv√© dans le texte")
                return self._manual_parse_exercise(text)
                
            json_str = json_match.group()
            
            # Essayer plusieurs m√©thodes de nettoyage
            cleaning_methods = [self._clean_latex_escapes, self._clean_latex_escapes_alternative]
            
            for clean_method in cleaning_methods:
                try:
                    cleaned_json = clean_method(json_str)
                    exercise_data = json.loads(cleaned_json)
                    
                    # Valider que les champs requis sont pr√©sents
                    required_fields = ['exercise', 'solution', 'hints', 'difficulty', 'concept']
                    if all(field in exercise_data for field in required_fields):
                        return Exercise(**exercise_data)
                        
                except json.JSONDecodeError as e:
                    console.print(f"Erreur JSON avec m√©thode {clean_method.__name__}: {str(e)}")
                    continue
                except Exception as e:
                    console.print(f"Erreur autre avec m√©thode {clean_method.__name__}: {str(e)}")
                    continue
            
            # Si toutes les m√©thodes JSON √©chouent, essayer le parsing manuel
            return self._manual_parse_exercise(text)
            
        except Exception as e:
            console.print(f"Erreur parsing exercice: {str(e)}")
            console.print(f"Texte probl√©matique: {text[:500]}...")
            return None

    def generate_exercise(self) -> Optional[Exercise]:
        if not self.current_student or not self.current_student.current_objective:
            console.print("Aucun √©tudiant ou objectif d√©fini")
            return None

        objective_data = self.learning_objectives.objectives.get(self.current_student.current_objective, {})

        if not objective_data:
            return None

        # Plus de "niveaux", les infos sont d√©j√† au bon niveau
        level_info = {
            "level": objective_data.get("level"),
            "level_name": objective_data.get("level_name"),
            "objectives": objective_data.get("objectives", []),
            "example_exercises": objective_data.get("example_exercises", []),
            "example_functions": objective_data.get("example_functions", [])
        }

        # Exercice par d√©faut en cas d'√©chec avec d√©limiteurs math√©matiques
        default_exercise = Exercise(
            exercise=f"R√©soudre l'√©quation suivante: $x + 5 = 12$",
            solution=f"Pour r√©soudre $x + 5 = 12$, on soustrait 5 des deux c√¥t√©s: $x = 12 - 5 = 7$",
            hints=["Isolez la variable x", "Utilisez les op√©rations inverses"],
            difficulty=level_info["level_name"],
            concept=self.current_student.current_objective
        )

        if not self.exercise_creator_agent or not self.exercise_creation_task:
            return default_exercise

        try:
            # Prompt am√©lior√© avec instructions tr√®s claires pour les d√©limiteurs math√©matiques
            task = Task(
                description=f"""
Tu dois cr√©er un exercice de math√©matiques au format JSON STRICT avec expressions math√©matiques correctement d√©limit√©es.

CONTEXTE:
- Objectif: {objective_data["description"]}
- Niveau: {level_info["level_name"]} 
- Type: {self.current_student.current_objective}
- Exemple bas√© sur: {level_info["example_functions"][0] if level_info.get("example_functions") else "fonctions de base"}

R√àGLES STRICTES POUR LES EXPRESSIONS MATH√âMATIQUES:
1. TOUJOURS encadrer les expressions math√©matiques avec des d√©limiteurs:
   - Pour les expressions INLINE: $expression$ (un seul dollar de chaque c√¥t√©)
   - Pour les expressions EN BLOC: $$expression$$ (deux dollars de chaque c√¥t√©)
2. Exemples corrects:
   - Inline: "R√©soudre $x^2 + 3x - 4 = 0$"
   - Bloc: "La d√©riv√©e est: $$f'(x) = 2x + 3$$"
3. UTILISE des doubles backslashes pour LaTeX: \\\\frac{{a}}{{b}}, \\\\sqrt{{x}}
4. PAS de backslashes simples dans le JSON
5. Accolades doubles pour param√®tres: {{a}}, {{b}}

FORMAT EXACT REQUIS:
{{
  "exercise": "√ânonc√© avec expressions math√©matiques d√©limit√©es par $ ou $$",
  "solution": "Solution d√©taill√©e avec expressions math√©matiques d√©limit√©es",
  "hints": ["Indice 1 avec $math$ si n√©cessaire", "Indice 2", "Indice 3"],
  "difficulty": "{level_info["level_name"]}",
  "concept": "{self.current_student.current_objective}"
}}

EXEMPLE CORRECT:
{{
  "exercise": "Calculer la d√©riv√©e de la fonction $f(x) = \\\\frac{{x^2 + 1}}{{x - 2}}$",
  "solution": "Utilisons la r√®gle du quotient: si $f(x) = \\\\frac{{u(x)}}{{v(x)}}$, alors $$f'(x) = \\\\frac{{u'(x)v(x) - u(x)v'(x)}}{{[v(x)]^2}}$$ Ici $u(x) = x^2 + 1$, donc $u'(x) = 2x$. Et $v(x) = x - 2$, donc $v'(x) = 1$. Par cons√©quent: $$f'(x) = \\\\frac{{2x(x-2) - (x^2+1)(1)}}{{(x-2)^2}} = \\\\frac{{x^2 - 4x - 1}}{{(x-2)^2}}$$",
  "hints": ["Utilisez la r√®gle du quotient: $\\\\frac{{d}}{{dx}}[\\\\frac{{u}}{{v}}] = \\\\frac{{u'v - uv'}}{{v^2}}$", "Identifiez $u(x) = x^2 + 1$ et $v(x) = x - 2$", "Calculez $u'(x)$ et $v'(x)$ s√©par√©ment"],
  "difficulty": "Interm√©diaire",
  "concept": "D√©riv√©es"
}}

IMPORTANT: 
- R√©ponds UNIQUEMENT avec le JSON valide
- N'oublie JAMAIS les d√©limiteurs $ pour les expressions math√©matiques
- Teste mentalement que chaque expression math√©matique est bien encadr√©e
                """,
                agent=self.exercise_creator_agent,
                expected_output="JSON valide avec expressions math√©matiques correctement d√©limit√©es"
            )

            crew = Crew(
                agents=[self.exercise_creator_agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )

            result = crew.kickoff()
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'raw'):
                result_text = str(result.raw)
            else:
                result_text = str(result)
            
            # Parser l'exercice depuis le texte
            exercise = self._parse_exercise_from_text(result_text)
            return exercise if exercise else default_exercise

        except Exception as e:
            console.print(f"Erreur g√©n√©ration exercice: {str(e)}")
            return default_exercise

    def generate_similar_exercise(self, original_exercise: Exercise) -> Optional[Exercise]:
        if not self.current_student:
            console.print("Aucun √©tudiant d√©fini pour g√©n√©rer un exercice similaire.")
            return None

        if not self.exercise_creator_agent or not self.exercise_creation_task:
            console.print("Agents ou t√¢ches de cr√©ation d'exercices non initialis√©s.")
            return None

        try:
            # Convertir le niveau num√©rique en nom de niveau
            level_mapping = {
                1: "D√©butant",
                2: "Interm√©diaire", 
                3: "Avanc√©",
                4: "Expert"
            }
            level_name = level_mapping.get(self.current_student.level, "Interm√©diaire")
            
            task = Task(
                description=f"""
Cr√©e un exercice SIMILAIRE bas√© sur l'exercice original ci-dessous, avec expressions math√©matiques correctement d√©limit√©es.

EXERCICE ORIGINAL:
√ânonc√©: {original_exercise.exercise}
Concept: {original_exercise.concept}
Difficult√©: {original_exercise.difficulty}

OBJECTIF:
- Cr√©er un nouvel exercice du m√™me type avec des valeurs/param√®tres diff√©rents
- Niveau cible: {level_name}
- Garder le m√™me concept math√©matique: {original_exercise.concept}

R√àGLES STRICTES POUR LES EXPRESSIONS MATH√âMATIQUES:
1. TOUJOURS encadrer les expressions math√©matiques:
   - Expressions INLINE: $expression$
   - Expressions EN BLOC: $$expression$$
2. UTILISE des doubles backslashes pour LaTeX: \\\\frac{{a}}{{b}}, \\\\sqrt{{x}}
3. Accolades doubles pour param√®tres: {{a}}, {{b}}
4. JSON parfaitement valide

FORMAT EXACT:
{{
  "exercise": "Nouvel √©nonc√© avec expressions math√©matiques d√©limit√©es par $ ou $$",
  "solution": "Solution d√©taill√©e avec expressions math√©matiques d√©limit√©es",
  "hints": ["Indice 1 avec $math$ si n√©cessaire", "Indice 2", "Indice 3"],
  "difficulty": "{original_exercise.difficulty}",
  "concept": "{original_exercise.concept}"
}}

EXEMPLE:
Si l'original √©tait: "D√©river $f(x) = x^2 + 3x$"
Le similaire pourrait √™tre: "D√©river $g(x) = 2x^3 - 5x + 1$"

IMPORTANT: 
- R√©ponds UNIQUEMENT avec le JSON valide
- N'oublie JAMAIS les d√©limiteurs $ pour les expressions math√©matiques
                """,
                agent=self.exercise_creator_agent,
                expected_output="JSON valide d'exercice similaire avec expressions math√©matiques d√©limit√©es"
            )
            
            crew = Crew(
                agents=[self.exercise_creator_agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'raw'):
                result_text = str(result.raw)
            else:
                result_text = str(result)
            
            # Parser l'exercice depuis le texte
            return self._parse_exercise_from_text(result_text)
            
        except Exception as e:
            console.print(f"Erreur lors de la g√©n√©ration d'un exercice similaire: {str(e)}")
            return None

    def _parse_evaluation_from_text(self, text: str) -> Optional[EvaluationResult]:
        """Parse une √©valuation depuis le texte de sortie"""
        try:
            # Chercher un JSON dans le texte
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                
                # Nettoyer les √©chappements LaTeX probl√©matiques
                json_str = self._clean_latex_escapes(json_str)
                
                eval_data = json.loads(json_str)
                return EvaluationResult(**eval_data)
            
            return None
            
        except Exception as e:
            console.print(f"Erreur parsing √©valuation: {str(e)}")
            console.print(f"Texte probl√©matique: {text[:500]}...")
            return None

    def evaluate_response(self, exercise: Exercise, answer: Union[str, Path]) -> EvaluationResult:
        extracted_text = ""
        if isinstance(answer, (Path, str)) and Path(answer).exists():
            extracted_text = self.file_processor.extract_text_from_file(str(answer))
            if not extracted_text:
                console.print("Aucun texte extrait du fichier")
                return self._create_fallback_evaluation(exercise)
        else:
            extracted_text = str(answer)

        if not self.evaluator_agent or not self.evaluation_task:
            return self._create_fallback_evaluation(exercise)

        try:
            task = Task(
                description=f"""
√âvalue la r√©ponse de l'√©tudiant √† cet exercice de math√©matiques.

EXERCICE: {exercise.exercise}
SOLUTION ATTENDUE: {exercise.solution}
R√âPONSE √âTUDIANT: {extracted_text}

√âVALUATION REQUISE:
1. La r√©ponse est-elle correcte ? (true/false)
2. Quel type d'erreur si incorrecte ?
3. Feedback p√©dagogique constructif avec expressions math√©matiques d√©limit√©es
4. Explication d√©taill√©e de la solution avec expressions math√©matiques d√©limit√©es
5. Correction √©tape par √©tape avec expressions math√©matiques d√©limit√©es
6. Recommandations pour l'am√©lioration

R√àGLES POUR LES EXPRESSIONS MATH√âMATIQUES:
- TOUJOURS encadrer les expressions math√©matiques:
  - Expressions INLINE: $expression$
  - Expressions EN BLOC: $$expression$$
- Doubles backslashes pour LaTeX: \\\\frac{{a}}{{b}}, \\\\sqrt{{x}}

FORMAT JSON EXACT:
{{
  "is_correct": true/false,
  "error_type": "Type d'erreur sp√©cifique ou null si correct",
  "feedback": "Feedback p√©dagogique avec expressions math√©matiques d√©limit√©es par $ ou $$",
  "detailed_explanation": "Explication math√©matique compl√®te avec expressions d√©limit√©es",
  "step_by_step_correction": "Correction d√©taill√©e avec expressions math√©matiques d√©limit√©es",
  "recommendations": ["Recommandation 1", "Recommandation 2", "Recommandation 3"]
}}

EXEMPLE de feedback avec math:
"feedback": "Votre approche est correcte mais vous avez fait une erreur dans le calcul de $\\\\frac{{d}}{{dx}}[x^2] = 2x$. La d√©riv√©e finale devrait √™tre $f'(x) = 2x + 3$."

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide avec expressions math√©matiques correctement d√©limit√©es.
                """,
                agent=self.evaluator_agent,
                expected_output="√âvaluation d√©taill√©e au format JSON avec expressions math√©matiques d√©limit√©es"
            )
            
            crew = Crew(
                agents=[self.evaluator_agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'raw'):
                result_text = str(result.raw)
            else:
                result_text = str(result)
            
            # Parser l'√©valuation depuis le texte
            evaluation = self._parse_evaluation_from_text(result_text)
            return evaluation if evaluation else self._create_fallback_evaluation(exercise)
            
        except Exception as e:
            console.print(f"Erreur √©valuation r√©ponse: {str(e)}")
            return self._create_fallback_evaluation(exercise)

    def _create_fallback_evaluation(self, exercise: Exercise) -> EvaluationResult:
        return EvaluationResult(
            is_correct=False,
            error_type="√âvaluation impossible",
            feedback="Impossible d'√©valuer la r√©ponse automatiquement. Veuillez r√©essayer ou fournir une r√©ponse plus claire.",
            detailed_explanation=f"La solution attendue √©tait: {exercise.solution}",
            step_by_step_correction="Aucune correction d√©taill√©e disponible en raison de l'erreur d'√©valuation.",
            recommendations=["V√©rifiez votre saisie", "Reformulez votre r√©ponse", "Contactez le support si le probl√®me persiste"]
        )

    def _create_fallback_coaching(self) -> CoachPersonal:
        return CoachPersonal(
            motivation="Continue tes efforts, chaque √©tape compte dans ton apprentissage !",
            strategy="Essaie de d√©composer les probl√®mes complexes en √©tapes plus simples et g√©rables.",
            tip="N'h√©site pas √† refaire les exercices pour bien ma√Ætriser les concepts.",
            encouragement=["Tu progresses bien !", "La pers√©v√©rance est la cl√© du succ√®s en math√©matiques.", "Chaque erreur est une opportunit√© d'apprendre."]
        )

    def _parse_coaching_from_text(self, text: str) -> Optional[CoachPersonal]:
        """Parse un message de coaching depuis le texte de sortie"""
        try:
            # Chercher un JSON dans le texte
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                
                # Nettoyer les √©chappements LaTeX probl√©matiques
                json_str = self._clean_latex_escapes(json_str)
                
                coaching_data = json.loads(json_str)
                return CoachPersonal(**coaching_data)
            
            return None
            
        except Exception as e:
            console.print(f"Erreur parsing coaching: {str(e)}")
            console.print(f"Texte probl√©matique: {text[:500]}...")
            return None

    def get_personal_coach_message(self) -> Optional[CoachPersonal]:
        if not self.personal_coach_agent or not self.llm:
            return self._create_fallback_coaching()
        
        try:
            task = Task(
                description="""
G√©n√®re un message de motivation personnalis√© pour un √©tudiant en math√©matiques.

OBJECTIF: Cr√©er un message positif et constructif qui aide l'√©tudiant √† rester motiv√© et engag√©.

COMPOSANTS REQUIS:
1. Message de motivation inspirant et personnel
2. Strat√©gie concr√®te d'apprentissage applicable
3. Astuce pratique pour am√©liorer les performances en math√©matiques
4. Phrases d'encouragement positives et motivantes

Si tu inclus des expressions math√©matiques, encadre-les avec $ pour inline ou $$ pour bloc.

FORMAT JSON EXACT:
{
  "motivation": "Message motivant et inspirant personnalis√©",
  "strategy": "Strat√©gie concr√®te et applicable pour l'apprentissage",
  "tip": "Astuce pratique et utile pour les math√©matiques",
  "encouragement": ["Phrase positive 1", "Phrase positive 2", "Phrase positive 3"]
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, aucun texte suppl√©mentaire.
                """,
                agent=self.personal_coach_agent,
                expected_output="Message de coaching complet au format JSON"
            )
            
            crew = Crew(
                agents=[self.personal_coach_agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'raw'):
                result_text = str(result.raw)
            else:
                result_text = str(result)
            
            # Parser le coaching depuis le texte
            coaching = self._parse_coaching_from_text(result_text)
            return coaching if coaching else self._create_fallback_coaching()
            
        except Exception as e:
            console.print(f"Erreur g√©n√©ration message coach: {str(e)}")
            return self._create_fallback_coaching()
        
    def check_objective_completion(self) -> bool:
        """
        V√©rifie si l'√©tudiant a termin√© son objectif actuel
        Crit√®res : nombre d'exercices r√©ussis, progression dans les niveaux, etc.
        """
        if not self.current_student or not self.current_student.current_objective:
            return False
        
        # Analyser l'historique d'apprentissage r√©cent
        recent_exercises = self.current_student.learning_history[-10:]  # 10 derniers exercices
        if len(recent_exercises) < 5:  # Pas assez d'exercices pour √©valuer
            return False
        
        # Calculer le taux de r√©ussite r√©cent
        correct_answers = sum(1 for ex in recent_exercises if ex.get('evaluation', False))
        success_rate = correct_answers / len(recent_exercises)
        
        # Crit√®res de completion (ajustables)
        if success_rate >= 0.8:  # 80% de r√©ussite sur les derniers exercices
            return True
        
        return False
    
    
    def get_session_stats(self) -> dict:
        """R√©cup√®re les statistiques des sessions actives"""
        return self.session_manager.get_sessions_info()

    def cleanup_expired_sessions(self) -> int:
        """Nettoie les sessions expir√©es (peut √™tre appel√© manuellement)"""
        return self.session_manager.cleanup_expired_sessions()

    def shutdown(self):
        """Arr√™t propre du syst√®me avec sauvegarde des sessions"""
        console.print("üõë Arr√™t du syst√®me de tutorat...")
        if hasattr(self, 'session_manager'):
            self.session_manager.shutdown()
        console.print("‚úÖ Syst√®me arr√™t√© proprement")

    
    
    def advance_to_next_objective(self) -> bool:
        """Version mise √† jour avec sauvegarde via SessionManager"""
        if not self.current_student or not self.current_student.current_objective:
            return False
        
        # Ajouter l'objectif actuel aux objectifs compl√©t√©s
        current_obj = self.current_student.current_objective
        if current_obj not in self.current_student.objectives_completed:
            self.current_student.objectives_completed.append(current_obj)
        
        # Trouver l'index de l'objectif actuel
        try:
            current_index = self.learning_objectives.objectives_order.index(current_obj)
        except ValueError:
            console.print(f"Objectif actuel non trouv√© dans l'ordre: {current_obj}")
            return False
        
        # V√©rifier s'il y a un objectif suivant
        if current_index + 1 < len(self.learning_objectives.objectives_order):
            next_objective = self.learning_objectives.objectives_order[current_index + 1]
            self.current_student.current_objective = next_objective
            
            # Optionnel : augmenter le niveau si appropri√©
            if self.current_student.level < 4:  # Maximum niveau 4
                self.current_student.level += 1
            
            # Sauvegarder les changements via SessionManager
            self.save_current_student()
            
            console.print(f"‚úÖ Progression vers: {next_objective} (Niveau {self.current_student.level})")
            return True
        else:
            # Tous les objectifs sont termin√©s
            self.current_student.current_objective = None
            self.save_current_student()
            console.print("üéâ Tous les objectifs ont √©t√© compl√©t√©s !")
            return False
        
    def get_progression_status(self) -> dict:
        """
        Retourne le statut de progression d√©taill√©
        """
        if not self.current_student:
            return {"error": "Aucun √©tudiant s√©lectionn√©"}
        
        total_objectives = len(self.learning_objectives.objectives_order)
        completed_count = len(self.current_student.objectives_completed)
        current_obj = self.current_student.current_objective
        
        # Calculer le pourcentage de progression
        if current_obj and current_obj in self.learning_objectives.objectives_order:
            current_index = self.learning_objectives.objectives_order.index(current_obj)
            progress_percentage = (completed_count / total_objectives) * 100
        else:
            progress_percentage = (completed_count / total_objectives) * 100
        
        # V√©rifier si pr√™t pour la progression
        ready_to_advance = self.check_objective_completion()
        
        return {
            "total_objectives": total_objectives,
            "completed_objectives": completed_count,
            "current_objective": current_obj,
            "progress_percentage": round(progress_percentage, 1),
            "current_level": self.current_student.level,
            "ready_to_advance": ready_to_advance,
            "next_objective": self._get_next_objective(),
            "recent_success_rate": self._calculate_recent_success_rate()
        }

    def _get_next_objective(self) -> str:
        """Retourne le prochain objectif ou None si termin√©"""
        if not self.current_student or not self.current_student.current_objective:
            return None
        
        try:
            current_index = self.learning_objectives.objectives_order.index(
                self.current_student.current_objective
            )
            if current_index + 1 < len(self.learning_objectives.objectives_order):
                return self.learning_objectives.objectives_order[current_index + 1]
        except (ValueError, IndexError):
            pass
        
        return None

    def _calculate_recent_success_rate(self) -> float:
        """Calcule le taux de r√©ussite r√©cent"""
        if not self.current_student or not self.current_student.learning_history:
            return 0.0
        
        recent_exercises = self.current_student.learning_history[-10:]
        if not recent_exercises:
            return 0.0
        
        correct_count = sum(1 for ex in recent_exercises if ex.get('evaluation', False))
        return round((correct_count / len(recent_exercises)) * 100, 1)

    def auto_check_and_advance(self) -> dict:
        """
        V√©rifie automatiquement et fait progresser l'√©tudiant si les crit√®res sont remplis
        Utilis√© apr√®s chaque √©valuation d'exercice
        """
        result = {
            "progression_occurred": False,
            "message": "",
            "new_objective": None,
            "new_level": None
        }
        
        if self.check_objective_completion():
            if self.advance_to_next_objective():
                result["progression_occurred"] = True
                result["message"] = "F√©licitations ! Vous avez termin√© cet objectif et progress√© vers le suivant."
                result["new_objective"] = self.current_student.current_objective
                result["new_level"] = self.current_student.level
            else:
                result["message"] = "F√©licitations ! Vous avez termin√© tous les objectifs du programme !"
        
        return result

    # Nouvelles m√©thodes pour l'interface web
    def generate_exercise_for_api(self, student_id: str) -> dict:
        """
        Version API de g√©n√©ration d'exercice qui retourne un dictionnaire compatible avec l'interface web
        """
        self.set_current_student(student_id)
        exercise = self.generate_exercise()
        
        if not exercise:
            return {
                "error": "Impossible de g√©n√©rer un exercice",
                "exercise": None
            }
        
        # Retourner dans le format attendu par l'interface
        return {
            "exercise": exercise.exercise,
            "solution": exercise.solution,
            "hints": exercise.hints,
            "difficulty": exercise.difficulty,
            "concept": exercise.concept,
            "context": None,  # Peut √™tre ajout√© plus tard si n√©cessaire
            "objective": self.current_student.current_objective if self.current_student else None
        }

    def generate_similar_exercise_for_api(self, original_exercise_data: dict) -> dict:
        """
        Version API de g√©n√©ration d'exercice similaire
        """
        if not self.current_student:
            return {
                "error": "Aucun √©tudiant s√©lectionn√©",
                "exercise": None
            }
        
        # Cr√©er un objet Exercise √† partir des donn√©es
        original_exercise = Exercise(
            exercise=original_exercise_data.get("exercise", ""),
            solution=original_exercise_data.get("solution", ""),
            hints=original_exercise_data.get("hints", []),
            difficulty=original_exercise_data.get("difficulty", ""),
            concept=original_exercise_data.get("concept", "")
        )
        
        similar_exercise = self.generate_similar_exercise(original_exercise)
        
        if not similar_exercise:
            return {
                "error": "Impossible de g√©n√©rer un exercice similaire",
                "exercise": None
            }
        
        return {
            "exercise": similar_exercise.exercise,
            "solution": similar_exercise.solution,
            "hints": similar_exercise.hints,
            "difficulty": similar_exercise.difficulty,
            "concept": similar_exercise.concept,
            "context": None,
            "objective": self.current_student.current_objective if self.current_student else None
        }

    def evaluate_answer_for_api(self, exercise_data: dict, answer: str, student_id: str) -> dict:
        """
        Version API d'√©valuation d'une r√©ponse textuelle avec gestion de la progression
        """
        self.set_current_student(student_id)
        
        # Cr√©er un objet Exercise √† partir des donn√©es
        exercise = Exercise(
            exercise=exercise_data.get("exercise", ""),
            solution=exercise_data.get("solution", ""),
            hints=exercise_data.get("hints", []),
            difficulty=exercise_data.get("difficulty", ""),
            concept=exercise_data.get("concept", "")
        )
        
        # √âvaluer la r√©ponse
        evaluation = self.evaluate_response(exercise, answer)
        
        # Enregistrer dans l'historique de l'√©tudiant
        if self.current_student:
            self.current_student.learning_history.append({
                "exercise": exercise.exercise,
                "answer": answer,
                "evaluation": evaluation.is_correct,
                "timestamp": datetime.now().isoformat(),
                "concept": exercise.concept
            })
            self.student_manager.save_student(self.current_student)
        
        # V√©rifier la progression
        progression_result = self.auto_check_and_advance()
        
        # Adapter le format de retour pour l'interface
        api_result = {
            "evaluation": {
                "is_correct": evaluation.is_correct,
                "feedback": evaluation.feedback if hasattr(evaluation, 'feedback') else evaluation.detailed_explanation,
                "explanation": evaluation.detailed_explanation if hasattr(evaluation, 'detailed_explanation') else evaluation.feedback,
                "correct_answer": exercise.solution,
                "error_type": evaluation.error_type if hasattr(evaluation, 'error_type') else None,
                "recommendations": evaluation.recommendations if hasattr(evaluation, 'recommendations') else []
            }
        }
        
        # Ajouter les informations de progression si applicable
        if progression_result["progression_occurred"]:
            api_result["progression"] = {
                "level_up": True,
                "new_objective": progression_result["new_objective"],
                "new_level": progression_result["new_level"],
                "message": progression_result["message"]
            }
        
        return api_result

    def evaluate_file_answer_for_api(self, exercise_data: dict, file_path: str, student_id: str) -> dict:
        """
        Version API d'√©valuation d'une r√©ponse fichier avec gestion de la progression
        """
        self.set_current_student(student_id)
        
        # Cr√©er un objet Exercise √† partir des donn√©es
        exercise = Exercise(
            exercise=exercise_data.get("exercise", ""),
            solution=exercise_data.get("solution", ""),
            hints=exercise_data.get("hints", []),
            difficulty=exercise_data.get("difficulty", ""),
            concept=exercise_data.get("concept", "")
        )
        
        # √âvaluer la r√©ponse √† partir du fichier
        evaluation = self.evaluate_response(exercise, Path(file_path))
        
        # Enregistrer dans l'historique de l'√©tudiant
        if self.current_student:
            self.current_student.learning_history.append({
                "exercise": exercise.exercise,
                "answer": f"Fichier: {Path(file_path).name}",
                "evaluation": evaluation.is_correct,
                "timestamp": datetime.now().isoformat(),
                "concept": exercise.concept
            })
            self.student_manager.save_student(self.current_student)
        
        # V√©rifier la progression
        progression_result = self.auto_check_and_advance()
        
        # Adapter le format de retour pour l'interface
        api_result = {
            "evaluation": {
                "is_correct": evaluation.is_correct,
                "feedback": evaluation.feedback if hasattr(evaluation, 'feedback') else evaluation.detailed_explanation,
                "explanation": evaluation.detailed_explanation if hasattr(evaluation, 'detailed_explanation') else evaluation.feedback,
                "correct_answer": exercise.solution,
                "error_type": evaluation.error_type if hasattr(evaluation, 'error_type') else None,
                "recommendations": evaluation.recommendations if hasattr(evaluation, 'recommendations') else []
            }
        }
        
        # Ajouter les informations de progression si applicable
        if progression_result["progression_occurred"]:
            api_result["progression"] = {
                "level_up": True,
                "new_objective": progression_result["new_objective"],
                "new_level": progression_result["new_level"],
                "message": progression_result["message"]
            }
        
        return api_result
    
    def get_personalized_coach_message(self, exercise: Optional[Exercise] = None, 
                                    student_answer: Optional[str] = None,
                                    evaluation: Optional[EvaluationResult] = None) -> Optional[PersonalizedCoachMessage]:
        """
        G√©n√®re un message de coaching personnalis√© bas√© sur l'exercice et la r√©ponse de l'√©tudiant
        """
        if not self.personal_coach_agent or not self.llm:
            return self._create_fallback_personalized_coaching()
        
        try:
            # Construire le contexte pour le coach
            context_parts = []
            
            if exercise:
                context_parts.append(f"EXERCICE: {exercise.exercise}")
                context_parts.append(f"SOLUTION ATTENDUE: {exercise.solution}")
                context_parts.append(f"CONCEPT: {exercise.concept}")
                context_parts.append(f"DIFFICULT√â: {exercise.difficulty}")
            
            if student_answer:
                context_parts.append(f"R√âPONSE DE L'√âTUDIANT: {student_answer}")
            
            if evaluation:
                context_parts.append(f"√âVALUATION: {'Correcte' if evaluation.is_correct else 'Incorrecte'}")
                if evaluation.error_type:
                    context_parts.append(f"TYPE D'ERREUR: {evaluation.error_type}")
            
            # Ajouter l'historique de l'√©tudiant pour plus de contexte
            if self.current_student and self.current_student.learning_history:
                recent_history = self.current_student.learning_history[-5:]  # 5 derniers exercices
                success_rate = sum(1 for h in recent_history if h.get('evaluation', False)) / len(recent_history)
                context_parts.append(f"TAUX DE R√âUSSITE R√âCENT: {success_rate:.1%}")
                context_parts.append(f"NIVEAU √âTUDIANT: {self.current_student.level}")
                context_parts.append(f"OBJECTIF ACTUEL: {self.current_student.current_objective}")
            
            context_str = "\n".join(context_parts)
            
            task = Task(
                description=f"""
    Tu es un coach math√©matique IA personnalis√©. G√©n√®re un message de coaching adapt√© √† la situation sp√©cifique de l'√©tudiant.

    CONTEXTE DE L'√âTUDIANT:
    {context_str}

    ANALYSE REQUISE:
    1. Analyse la r√©ponse de l'√©tudiant par rapport √† l'exercice
    2. Identifie ses forces et faiblesses sp√©cifiques
    3. Adapte le coaching √† son niveau et ses besoins

    COACHING PERSONNALIS√â REQUIS:
    1. **motivation**: Message motivant bas√© sur sa performance actuelle
    2. **strategy**: Strat√©gie sp√©cifique pour am√©liorer ses points faibles identifi√©s
    3. **tip**: Astuce cibl√©e pour le concept math√©matique en question
    4. **encouragement**: Liste de phrases positives adapt√©es √† sa situation
    5. **next_steps**: Liste d'√©tapes concr√®tes recommand√©es pour progresser

    R√àGLES POUR LES EXPRESSIONS MATH√âMATIQUES:
    - Encadrer avec $ pour inline ou $$ pour bloc
    - Doubles backslashes: \\\\frac{{a}}{{b}}

    EXEMPLES D'ADAPTATION:
    - Si l'√©tudiant a fait une erreur de calcul ‚Üí Focus sur la m√©thode, pas juste la motivation
    - Si l'√©tudiant a la bonne approche mais mauvaise ex√©cution ‚Üí Encourager l'approche, corriger l'ex√©cution
    - Si l'√©tudiant est compl√®tement perdu ‚Üí D√©composer en √©tapes plus simples
    - Si l'√©tudiant r√©ussit bien ‚Üí D√©fis plus avanc√©s

    FORMAT JSON EXACT:
    {{
    "motivation": "Message motivant personnalis√© bas√© sur sa performance",
    "strategy": "Strat√©gie sp√©cifique pour ses besoins identifi√©s",
    "tip": "Astuce cibl√©e pour le concept avec expressions math√©matiques d√©limit√©es",
    "encouragement": ["Encouragement sp√©cifique 1", "Encouragement sp√©cifique 2", "Encouragement sp√©cifique 3"],
    "next_steps": ["√âtape concr√®te 1", "√âtape concr√®te 2", "√âtape concr√®te 3"]
    }}

    IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, sois sp√©cifique et personnalis√©.
                """,
                agent=self.personal_coach_agent,
                expected_output="Message de coaching personnalis√© au format JSON"
            )
            
            crew = Crew(
                agents=[self.personal_coach_agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            
            # Extraire le texte du r√©sultat
            result_text = ""
            if hasattr(result, 'raw'):
                result_text = str(result.raw)
            else:
                result_text = str(result)
            
            # Parser le coaching depuis le texte
            coaching = self._parse_personalized_coaching_from_text(result_text)
            return coaching if coaching else self._create_fallback_personalized_coaching()
            
        except Exception as e:
            console.print(f"Erreur g√©n√©ration coaching personnalis√©: {str(e)}")
            return self._create_fallback_personalized_coaching()

    def _parse_personalized_coaching_from_text(self, text: str) -> Optional[PersonalizedCoachMessage]:
        """Parse un message de coaching personnalis√© depuis le texte de sortie"""
        try:
            # Chercher un JSON dans le texte
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                
                # Nettoyer les √©chappements LaTeX probl√©matiques
                json_str = self._clean_latex_escapes(json_str)
                
                coaching_data = json.loads(json_str)
                return PersonalizedCoachMessage(**coaching_data)
            
            return None
            
        except Exception as e:
            console.print(f"Erreur parsing coaching personnalis√©: {str(e)}")
            console.print(f"Texte probl√©matique: {text[:500]}...")
            return None

    def _create_fallback_personalized_coaching(self) -> PersonalizedCoachMessage:
        return PersonalizedCoachMessage(
            motivation="Continue tes efforts, chaque √©tape compte dans ton apprentissage !",
            strategy="Essaie de d√©composer les probl√®mes complexes en √©tapes plus simples et g√©rables.",
            tip="N'h√©site pas √† refaire les exercices pour bien ma√Ætriser les concepts.",
            encouragement=["Tu progresses bien !", "La pers√©v√©rance est la cl√© du succ√®s en math√©matiques.", "Chaque erreur est une opportunit√© d'apprendre."],
            next_steps=["R√©vise les concepts de base", "Pratique avec des exercices similaires", "N'h√©site pas √† demander de l'aide"]
        )
        
        
        
    def evaluate_answer_for_api_with_coaching(self, exercise_data: dict, answer: str, student_id: str) -> dict:
        """Version API d'√©valuation avec coaching personnalis√© et gestion de session"""
        # Utiliser set_current_student qui g√®re maintenant les sessions
        self.set_current_student(student_id)
        
        # Cr√©er un objet Exercise √† partir des donn√©es
        exercise = Exercise(
            exercise=exercise_data.get("exercise", ""),
            solution=exercise_data.get("solution", ""),
            hints=exercise_data.get("hints", []),
            difficulty=exercise_data.get("difficulty", ""),
            concept=exercise_data.get("concept", "")
        )
        
        # √âvaluer la r√©ponse
        evaluation = self.evaluate_response(exercise, answer)
        
        # G√©n√©rer le coaching personnalis√©
        personalized_coaching = self.get_personalized_coach_message(
            exercise=exercise,
            student_answer=answer,
            evaluation=evaluation
        )
        
        # Ajouter √† l'historique avec sauvegarde automatique
        self.add_exercise_to_history(exercise, answer, evaluation.is_correct)
        
        # V√©rifier la progression
        progression_result = self.auto_check_and_advance()
        
        # Retourner le r√©sultat complet avec coaching personnalis√©
        api_result = {
            "evaluation": {
                "is_correct": evaluation.is_correct,
                "feedback": evaluation.feedback if hasattr(evaluation, 'feedback') else evaluation.detailed_explanation,
                "explanation": evaluation.detailed_explanation if hasattr(evaluation, 'detailed_explanation') else evaluation.feedback,
                "correct_answer": exercise.solution,
                "error_type": evaluation.error_type if hasattr(evaluation, 'error_type') else None,
                "recommendations": evaluation.recommendations if hasattr(evaluation, 'recommendations') else []
            },
            "personalized_coaching": {
                "motivation": personalized_coaching.motivation,
                "strategy": personalized_coaching.strategy,
                "tip": personalized_coaching.tip,
                "encouragement": personalized_coaching.encouragement,
                "next_steps": personalized_coaching.next_steps
            } if personalized_coaching else None,
            "session_info": {
                "session_active": True,
                "last_activity": datetime.now().isoformat(),
                "exercises_completed": len(self.current_student.learning_history)
            }
        }
        
        # Ajouter les informations de progression si applicable
        if progression_result["progression_occurred"]:
            api_result["progression"] = {
                "level_up": True,
                "new_objective": progression_result["new_objective"],
                "new_level": progression_result["new_level"],
                "message": progression_result["message"]
            }
        
        return api_result
    
    

if __name__ == "__main__":
    system = MathTutoringSystem()
    
    # Example Usage
    if system.llm:  # V√©rifier que l'API est disponible
        console.print("=== Initialisation du Syst√®me de Tutorat Math√©matique ===")
        
        # Create a student
        student = system.student_manager.create_student(name="Alice")
        system.set_current_student(student.student_id)
        console.print(f"‚úÖ √âtudiant cr√©√©: {system.current_student.name} (ID: {system.current_student.student_id})")

        # Set a current objective for the student
        if system.learning_objectives.objectives_order:
            system.current_student.current_objective = system.learning_objectives.objectives_order[0]
            system.student_manager.save_student(system.current_student)
            console.print(f"‚úÖ Objectif actuel d√©fini: {system.current_student.current_objective}")

        console.print("\n=== Test API - G√©n√©ration d'Exercice ===")
        # Test API exercise generation
        exercise_result = system.generate_exercise_for_api(student.student_id)
        if not exercise_result.get("error"):
            console.print(f"üìù Exercice g√©n√©r√© via API:")
            console.print(f"   √ânonc√©: {exercise_result['exercise']}")
            console.print(f"   Difficult√©: {exercise_result['difficulty']}")
            console.print(f"   Concept: {exercise_result['concept']}")

            console.print("\n=== Test API - √âvaluation de R√©ponse ===")
            # Test API answer evaluation
            student_answer = "Je pense que la r√©ponse est $x = 5$, mais je ne suis pas s√ªr des √©tapes."
            eval_result = system.evaluate_answer_for_api(exercise_result, student_answer, student.student_id)
            console.print(f"üìä √âvaluation via API:")
            console.print(f"   Correcte: {eval_result['evaluation']['is_correct']}")
            console.print(f"   Feedback: {eval_result['evaluation']['feedback'][:100]}...")
            
            if eval_result.get("progression"):
                console.print(f"üéâ Progression d√©tect√©e: {eval_result['progression']['message']}")

        console.print("\n=== Message du Coach Personnel ===")
        # Get a personal coach message
        coach_message = system.get_personal_coach_message()
        if coach_message:
            console.print(f"üí™ Message du coach:")
            console.print(f"   Motivation: {coach_message.motivation}")
            console.print(f"   Strat√©gie: {coach_message.strategy}")
            console.print(f"   Astuce: {coach_message.tip}")
            console.print(f"   Encouragements: {', '.join(coach_message.encouragement)}")

        console.print("\n=== Progression de l'√âtudiant ===")
        # Get student progress
        progress = system.get_student_progress()
        if progress:
            console.print(f"üìà Progression: Niveau {progress['level']}, {progress['completed']} objectifs compl√©t√©s")
    else:
        console.print("‚ö†Ô∏è  Mode hors ligne - API non disponible")
        console.print("Pour tester le syst√®me complet, configurez votre cl√© API GROQ dans le fichier .env")